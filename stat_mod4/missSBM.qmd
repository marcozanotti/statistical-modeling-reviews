---
title: "missSBM"
author: "Marco Zanotti"
date: "2023-10-27"
format: 
  html:
    embed-resources: true
    smooth-scroll: true
    theme: darkly
    toc: true
    toc-location: left
    toc-title: "Contents"
    toc-depth: 3
---

```{r, echo=FALSE}
htmltools::img(
	src = knitr::image_uri("img/logo-giallo.png"), 
  alt = 'logo', 
	style = 'position:absolute; top:0; right:0; padding:10px;'
)
```

```{r, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE, 
  warning = FALSE,
  fig.width = 5, 
  fig.height = 4
)

n_cores <- parallel::detectCores()
future::plan("multisession", workers = n_cores)
```



## Package Description

When a network is partially observed (here, NAs in the adjacency matrix rather 
than 1 or 0 due to missing information between node pairs), it is possible to 
account for the underlying process that generates those NAs. ‘missSBM’, 
presented in ‘Barbillon, Chiquet and Tabouy’ (2022) adjusts the popular 
stochastic block model from network data observed under various missing data 
conditions, as described in ‘Tabouy, Barbillon and Chiquet’ (2019).  



## Setup

```{r setup}
library(igraph)
library(ggplot2)
library(corrplot)
library(missSBM)
library(future)

set.seed(1992) # set seed for reproducibility
```



## Data

The `war` data set comes with the `missSBM` package.

```{r load data set}
data("war")
```


### Belligerant Network

This data set contains a list of two networks, `belligerent` and `alliance`.
Here only the first one is used, where the nodes are countries and an edge 
in the network `belligerent` means that the two countries have been at war at 
least once between years 1816 to 2007. The network `belligerent` have less nodes 
since countries which have not been at war at all are not considered.  
There are also possible covariates on top of the network. Here the one concerned 
with military power of the states is considered.  
The `igraph` library is used to draw the network.

```{r war network plot, fig.width=7,  fig.height=7}
par(mar = c(0, 0, 0, 0))
plot(
	war$belligerent,
	vertex.shape = "none",
	vertex.label = V(war$belligerent)$name,
	vertex.label.color = "steel blue",
	vertex.label.font = 1.5,
	vertex.label.cex = .6,
	edge.color = "gray70",
	edge.width = 2
)
```

The adjacency matrix of the network can be extracted using the function `as_adj`.

```{r belligerent network}
belligerent_adjacency <- as_adj(war$belligerent, sparse = FALSE)
belligerent_power <- war$belligerent$power # covariate info
```


### Generating Missing Observations

Following the authors procedure, even though the dataset is complete, it is 
possible to assume that some data may be missing. More specifically, the data 
collection may be missing for some countries in the sense that data were 
collected comprehensively for a subset of countries only. This implies that the 
sampling is **node-centered** and collects edges information accordingly (there 
will be a block of missing data on the diagonal of the adjacency matrix).  

The function `observeNetwork` in **missSBM** allows to draw observations in an 
adjacency matrix according to a given network sampling design. The different 
sampling designs are split into two families: dyad-centered and node-centered. 
The sampling design has to be provided through the `sampling` argument, 
specifying also the parameter p, that is the probability that the node i is 
observed. The output is an adjacency matrix with the same dimension as the 
input, yet with additional NAs.

```{r sampling node, fig.align='center'}
partlyObservedNet_war <- missSBM::observeNetwork(
	adjacencyMatrix = belligerent_adjacency, 
	sampling = "node", 
	parameters = .8
)
corrplot(
	partlyObservedNet_war, 
  is.corr = FALSE,
  tl.pos = "n",
  method = "color", 
  cl.pos = "n",
  na.label.col = "grey",
  mar = c(0,0,1,0)
)
```



## Estimation

Now, the main purpose is to estimate a Stochastic Block Models (SBM) on the 
belligerent network. This step is performed through the function 
`estimateMissSBM` from the **missSBM** library. This functions provides a 
variational EM inference of Stochastic Block Models indexed by block number 
from a fully observed network, but, most importantly, from a partially observed 
network. By default, the function uses a forward/backward (split and merge) 
strategy on the clustering to avoid local minimal and get a robust Integrated 
Classification Likelihood Criterion (ICL), commonly used to perform model 
selection. This will make the choice of the number of group/block more robust.  


### Estimation on Fully Observed Network

To perform the estimation one just need to specify the adjacency matrix, the 
number of blocks and the sampling scheme. The exploration type (forward, 
backward, both or none, and number of iteration can be tuned via the `control` 
argument).  

```{r inference full, results='hide'}
vBlocks <- 1:5
collection_sbm_full <- estimateMissSBM(
	adjacencyMatrix = belligerent_adjacency, 
	vBlocks = vBlocks, 
	sampling = "node"
)
```

```{r}
collection_sbm_full
```

Via the argument `vBlocks` it is possible to specify the vector of number of 
blocks considered in the collection.


### Estimation with Missing Data

The same is done on the partially observed network.  

```{r inference node, results='hide'}
vBlocks <- 1:5
collection_sbm <- estimateMissSBM(
	adjacencyMatrix = partlyObservedNet_war, 
	vBlocks = vBlocks, 
	sampling = "node"
)
```

```{r}
collection_sbm
```



### Comparison

It would be interesting to compare the results of the estimation from the fully
observed network to that with missing observations.   

```{r plot comparison full, fig.align='center'}
rbind(
  data.frame(ICL = collection_sbm_full$ICL, nbBlocks = vBlocks, type = "full"),
  data.frame(ICL = collection_sbm$ICL, nbBlocks = vBlocks, type = "missing")
) |>  
  ggplot(aes(x = nbBlocks, y = ICL, group = type, color = type)) + 
  labs(title = "Model selection", x = "#blocks", y = "Integrated Classification Likelihood") +
  geom_line() + 
	theme_bw()
```

The model finally fitted on the network data can be represented thanks to a 
plot method applying on objects with class `SBM`.

```{r plot, fig.width=7, fig.height=7, fig.align='center'}
plot(collection_sbm_full$bestModel, type = "expected")
plot(collection_sbm$bestModel, type = "expected")
```


### Adding Covariates in the SBM

Consider a covariate reflecting the military power of the country, hence 
associated to the nodes. Typically, a part of the network is expected to be 
explained by a covariate. Including a covariate is straightforward since 
one just need to specify a list as the `covariates` argument.  

The covariate provided as a vector is transferred on edges through an $\ell_1$ 
similarity: for edge $(i,j)$ the associated covariate is defined by $|x_i-x_j|$ 
where $x_i$ denotes the covariate for node $i$. Another similarity measure 
could be provided via the option `similarity`.  

```{r war network with covariates full, results = 'hide'} 
vBlocks <- 1:5
collection_sbm_power_full <- estimateMissSBM(
	belligerent_adjacency, 
	vBlocks = vBlocks, 
	sampling = "node", 
	covariates = list(belligerent_power)
) 
```

```{r}
collection_sbm_power_full
```

The estimated effect of the covariate is obtained through  

```{r power_effect}
collection_sbm_power_full$bestModel$fittedSBM$covarParam
```


```{r future-plan-unset, include=FALSE}
future::plan("sequential")
```
